"""
Effectifs salari√©s et masse salariale trimestriels du secteur priv√©, 
par zone d'emploi
Lien :  https://www.data.gouv.fr/fr/datasets/effectifs-salaries-et-masse-salariale-trimestriels-du-secteur-prive-par-zone-demploi/

S√©ries trimestrielles des effectifs salari√©s et de la masse salariale 
du secteur priv√©, par zone d'emploi.

Objet : pr√©sentation des donn√©es sous Streamlit / Dash / Power BI

Dashboard :
https://docs.google.com/drawings/d/1OKiRsCjmbV6p6VJojp3Ivz3Hvs2_cKFvSBSMGZ-Qxq0/edit

Prochain travail : M√™me r√©sultat que streamlit mais cette fois-ci avec Dash ü¶π‚Äç‚ôÇÔ∏è

Date : 31-01-24
"""

from dash import Dash, html, dcc, callback, Input, State, Output, exceptions
import dash_bootstrap_components as dbc
import requests
import json
import pandas as pd
import plotly.express as px

# BACK END -----------------------------------------------------------

# R√©cup√©ration du fichier .csv converti en DF polars
job_df = pd.read_csv('data/emploi.csv', sep=";")

# Champs √† conserver
job_s1 = job_df[[
    "annee", "trimestre", "region", "zone_d_emploi",
    "effectifs_salaries_cvs", "masse_salariale_cvs"]].sort_values(
        by=['annee', 'trimestre', 'zone_d_emploi'])
    
# Filtre sur le champ 'annee'
my_df = job_s1[job_s1['annee'] > 2013]

# DF sur les r√©gions
region_df = my_df['region'].sort_values().unique()

# CONFIGURATION DES COMPOSANTS ----------------------------------------------

# Carte sur les menus d√©roulants et la table
dropdown_card = dbc.Card([
    
    # Titre rattach√© au menu d√©roulant pour les r√©gions
    html.Label("R√©gion", # Titre
               className='label-css', # Config dans le fichier .css
               ),
    
    # Menu d√©roulant pour les r√©gions
    dcc.Dropdown(
        id='id-region', # pour le callback
        value='Grand Est', # Valeur affich√©e par d√©faut
        options=region_df, # Valeurs ins√©r√©es dans le menu d√©roulant
        clearable=False, # Donn√©es non supprimables
        style={'color':'black'}, # Couleur du texte
        className='drop-css', # Config dans le fichier .css
        ),
    
    html.Br(),
    
    # Titre rattach√© au menu d√©roulant pour les zones d'emploi
    html.Label("Zone d'emploi", # Titre
               className='label-css', # Config dans le fichier .css
               ),
    
    # Zone vide pour le menu d√©roulant pour les zones d'emploi
    html.Div(id='id-area', # pour le callback
             children='', # Donn√©es vides
             )
    
], class_name='dropdown-card-css')

# FRONT END --------------------------------------------------------

# Instanciation de la librairie Dash avec th√®me appliqu√© sur la page @
# https://dash-bootstrap-components.opensource.faculty.ai/docs/themes/explorer/
app = Dash(external_stylesheets=[dbc.themes.SUPERHERO])

# Configuration de la page @
app.layout = html.Div(children=[
    
    # Titre principal de la page @
    html.H3("Effectifs et masse salariale par zone d'emploi",
            className='main-title'),
    
    # Insertion des composants configur√©s ci-avant
    dbc.Row([
        
        # Colonne sur les menus d√©roulants
        dbc.Col(
            
            # Composants compris dans cette colonne
            dbc.Row([
                
                # Carte sur les menus d√©roulants
                dropdown_card,
                
            ]), width=3, # Largeur de la colonne
            )
        ]),
    
])

# INTERACTION DES COMPOSANTS -------------------------------------------------

# MAJ du menu d√©roulant sur les zones d'emploi en fonction de la valeur s√©lectionn√©e
# dans le menu d√©roulant sur les r√©gions
@callback(
    Output( # Sortie : menu d√©roulant sur les zones d'emploi
        component_id='id-area', # ID 
        component_property='value', # Fonctionnalit√©
    ),
    Input( # Entr√©e : menu d√©roulant sur les r√©gions
          component_id='id-region', # ID
          component_property='value', # Fonctionnalit√©
    ),
)
def dropdown_func(input_value):
    
    # DF trait√©e selon la r√©gion s√©lectionn√©e dans le menu d√©roulant sur les r√©gions
    area_df = region_df[region_df["region"] == input_value]
    
    print(area_df)
    
    # Donn√©es √† conserver
    area_df = area_df["zone_d_emploi"].sort_values().unique()
    
    # Menu d√©roulant pour les r√©gions
    area_dropdown =  dcc.Dropdown(
        id='id-area',
        value=area_df[0], # 1√®re valeur affich√©e par d√©faut
        options=area_df, # Valeurs ins√©r√©es dans le menu d√©roulant
        clearable=False, # Donn√©es non supprimables
        style={'color':'black'}, # Couleur du texte
        className='drop-css', # Config dans le fichier .css
        ),
    
    # MAJ du menu d√©roulant
    return area_dropdown

if __name__ == '__main__':
    app.run_server(debug=True)
